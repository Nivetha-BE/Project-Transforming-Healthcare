# -*- coding: utf-8 -*-
"""project_phase2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gt5yLWLJeqe1t0N5UydYEVOjZQ54AuWs

Upload the Dataset
"""

from google.colab import files
uploaded=files.upload()

"""Load the Dataset"""

import pandas as pd

# Simulated healthcare dataset (in-memory, no CSV)
data = [
    {"PatientID": 1, "Age": 34, "Gender": "F", "Diagnosis": "Diabetes", "Treatment": "Insulin"},
    {"PatientID": 2, "Age": 45, "Gender": "M", "Diagnosis": "Hypertension", "Treatment": "Beta Blockers"},
    {"PatientID": 3, "Age": 29, "Gender": "F", "Diagnosis": "Asthma", "Treatment": "Inhaler"},
    {"PatientID": 4, "Age": 54, "Gender": "M", "Diagnosis": "Heart Disease", "Treatment": "Statins"},
    {"PatientID": 5, "Age": 63, "Gender": "F", "Diagnosis": "Arthritis", "Treatment": "NSAIDs"},
]

# Create a DataFrame
df = pd.DataFrame(data)

# Show the dataset
print("Healthcare Dataset:\n")
print(df)

# Example transformation: Add a Risk Score based on age
df["RiskScore"] = df["Age"].apply(lambda x: "High" if x > 50 else "Moderate" if x > 40 else "Low")

# Show transformed dataset
print("\nTransformed Dataset with Risk Scores:\n")
print(df)

"""Data Exploration"""

# Display first few rows
df.head()

"""Check for Missing Values and Duplicates"""

print(df.isnull().sum())

print("Duplicate rows:",df.duplicated().sum())

"""Visualize a Few Features"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Create in-memory healthcare dataset
data = [
    {"PatientID": 1, "Age": 34, "Gender": "F", "Diagnosis": "Diabetes", "Treatment": "Insulin"},
    {"PatientID": 2, "Age": 45, "Gender": "M", "Diagnosis": "Hypertension", "Treatment": "Beta Blockers"},
    {"PatientID": 3, "Age": 29, "Gender": "F", "Diagnosis": "Asthma", "Treatment": "Inhaler"},
    {"PatientID": 4, "Age": 54, "Gender": "M", "Diagnosis": "Heart Disease", "Treatment": "Statins"},
    {"PatientID": 5, "Age": 63, "Gender": "F", "Diagnosis": "Arthritis", "Treatment": "NSAIDs"},
]

# Create a DataFrame
df = pd.DataFrame(data)

# Add a simple Risk Score based on Age
df["RiskScore"] = df["Age"].apply(lambda x: "High" if x > 50 else "Moderate" if x > 40 else "Low")

# Set Seaborn style
sns.set(style="whitegrid")

# 1. Bar plot: Age by Patient
plt.figure(figsize=(8, 4))
sns.barplot(x="PatientID", y="Age", data=df, palette="Blues_d")
plt.title("Patient Ages")
plt.xlabel("Patient ID")
plt.ylabel("Age")
plt.tight_layout()
plt.show()

# 2. Count plot: Gender Distribution
plt.figure(figsize=(6, 4))
sns.countplot(x="Gender", data=df, palette="Set2")
plt.title("Gender Distribution")
plt.tight_layout()
plt.show()

# 3. Diagnosis Distribution
plt.figure(figsize=(8, 4))
sns.countplot(x="Diagnosis", data=df, palette="Set3")
plt.title("Diagnosis Distribution")
plt.xticks(rotation=30)
plt.tight_layout()
plt.show()

"""Identify Target and Features"""

import pandas as pd
from sklearn.model_selection import train_test_split

# Simulated in-memory healthcare data
data = [
    {"PatientID": 1, "Age": 34, "Gender": "F", "Diagnosis": "Diabetes", "Treatment": "Insulin"},
    {"PatientID": 2, "Age": 45, "Gender": "M", "Diagnosis": "Hypertension", "Treatment": "Beta Blockers"},
    {"PatientID": 3, "Age": 29, "Gender": "F", "Diagnosis": "Asthma", "Treatment": "Inhaler"},
    {"PatientID": 4, "Age": 54, "Gender": "M", "Diagnosis": "Heart Disease", "Treatment": "Statins"},
    {"PatientID": 5, "Age": 63, "Gender": "F", "Diagnosis": "Arthritis", "Treatment": "NSAIDs"},
]

# Create DataFrame
df = pd.DataFrame(data)

# Define a target variable: we will predict Treatment
target = "Treatment"

# Define feature variables: exclude PatientID and the target
features = ["Age", "Gender", "Diagnosis"]

# Encode categorical features (Gender, Diagnosis)
df_encoded = pd.get_dummies(df[features])

# Encode target using Label Encoding (for simplicity)
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df["TreatmentEncoded"] = le.fit_transform(df[target])

# Split the data
X = df_encoded
y = df["TreatmentEncoded"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Output
print("Feature Columns:\n", X.columns.tolist())
print("\nTarget Classes:", list(le.classes_))
print("\nTraining Data:\n", X_train)

"""Convert Categorical Columns to Numerical"""

# Identify categorical columns
categorical_cols = df.select_dtypes(include=['object']).columns
print("Categorical Columns:", categorical_cols.tolist())

"""One-Hot Encoding"""

df_encoded = pd.get_dummies(df, drop_first=True)

"""Feature Scaling"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# Simulated in-memory healthcare dataset
data = [
    {"PatientID": 1, "Age": 34, "Gender": "F", "Diagnosis": "Diabetes", "Treatment": "Insulin"},
    {"PatientID": 2, "Age": 45, "Gender": "M", "Diagnosis": "Hypertension", "Treatment": "Beta Blockers"},
    {"PatientID": 3, "Age": 29, "Gender": "F", "Diagnosis": "Asthma", "Treatment": "Inhaler"},
    {"PatientID": 4, "Age": 54, "Gender": "M", "Diagnosis": "Heart Disease", "Treatment": "Statins"},
    {"PatientID": 5, "Age": 63, "Gender": "F", "Diagnosis": "Arthritis", "Treatment": "NSAIDs"},
]

# Create DataFrame
df = pd.DataFrame(data)

# Define features and target
features = ["Age", "Gender", "Diagnosis"]
target = "Treatment"

# One-hot encode categorical features
X = pd.get_dummies(df[features])

# Label encode target
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(df[target])

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply Standard Scaling to the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Output
print("Original Features (Train):\n", X_train.head())
print("\nScaled Features (Train):\n", X_train_scaled)

"""Train-Test Split"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# Simulated in-memory healthcare dataset
data = [
    {"PatientID": 1, "Age": 34, "Gender": "F", "Diagnosis": "Diabetes", "Treatment": "Insulin"},
    {"PatientID": 2, "Age": 45, "Gender": "M", "Diagnosis": "Hypertension", "Treatment": "Beta Blockers"},
    {"PatientID": 3, "Age": 29, "Gender": "F", "Diagnosis": "Asthma", "Treatment": "Inhaler"},
    {"PatientID": 4, "Age": 54, "Gender": "M", "Diagnosis": "Heart Disease", "Treatment": "Statins"},
    {"PatientID": 5, "Age": 63, "Gender": "F", "Diagnosis": "Arthritis", "Treatment": "NSAIDs"},
]

# Load into DataFrame
df = pd.DataFrame(data)

# Features and target
features = ["Age", "Gender", "Diagnosis"]
target = "Treatment"

# Encode categorical features
X = pd.get_dummies(df[features])

# Encode the target variable
le = LabelEncoder()
y = le.fit_transform(df[target])

# Perform Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.4, random_state=42  # 60% training, 40% testing
)

# Output
print("Train Features:\n", X_train)
print("\nTest Features:\n", X_test)
print("\nTrain Labels:\n", y_train)
print("\nTest Labels:\n", y_test)

"""Model Building"""

# Train model
model = LinearRegression()
model.fit(X_train, y_train)
# Predict
y_pred = model.predict(X_test)

"""Evaluation"""

# Evaluate
print("MSE:", mean_squared_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))

"""Make Predictions from New Input"""

# Sample input (replace values with any other valid values from the original dataset)
new_student = {
'school': 'GP', # 'GP' or 'MS'
'sex': 'F', # 'F' or 'M'
'age': 17, # Integer
'address': 'U', # 'U' or 'R'
'famsize': 'GT3', # 'LE3' or 'GT3'
'Pstatus': 'A', # 'A' or 'T'
'Medu': 4, # 0 to 4
'Fedu': 3, # 0 to 4
'Mjob': 'health', # 'teacher', 'health', etc.
'Fjob': 'services',
'reason': 'course',
'guardian': 'mother',
'traveltime': 2,
'studytime': 3,
'failures': 0,
'schoolsup': 'yes',
'famsup': 'no',
'paid': 'no',
'activities': 'yes',
'nursery': 'yes',
'higher': 'yes',
'internet': 'yes',
'romantic': 'no',
'famrel': 4,
'freetime': 3,
'goout': 3,
'Dalc': 1,
'Walc': 1,
'health': 4,
'absences': 2,
'G1': 14,
'G2': 15
}

"""Convert to DataFrame and Encode"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Step 1: In-memory healthcare dataset
data = [
    {"PatientID": 1, "Age": 34, "Gender": "F", "Diagnosis": "Diabetes", "Treatment": "Insulin"},
    {"PatientID": 2, "Age": 45, "Gender": "M", "Diagnosis": "Hypertension", "Treatment": "Beta Blockers"},
    {"PatientID": 3, "Age": 29, "Gender": "F", "Diagnosis": "Asthma", "Treatment": "Inhaler"},
    {"PatientID": 4, "Age": 54, "Gender": "M", "Diagnosis": "Heart Disease", "Treatment": "Statins"},
    {"PatientID": 5, "Age": 63, "Gender": "F", "Diagnosis": "Arthritis", "Treatment": "NSAIDs"},
]

# Step 2: Convert to DataFrame
df = pd.DataFrame(data)

# Step 3: Select features and target
features = ["Age", "Gender", "Diagnosis"]
target = "Treatment"

# Step 4: Encode categorical features (one-hot)
X = pd.get_dummies(df[features])

# Step 5: Encode target using LabelEncoder
le = LabelEncoder()
y = le.fit_transform(df[target])

# Output
print("Encoded Features (X):\n", X)
print("\nEncoded Target (y):", y)
print("\nTarget Labels Mapping:", dict(zip(le.classes_, le.transform(le.classes_))))

"""Predict the Final Grade"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# Step 1: Simulated in-memory healthcare data
data = [
    {"Age": 34, "Gender": "F", "Diagnosis": "Diabetes", "Treatment": "Insulin", "HealthScore": 75},
    {"Age": 45, "Gender": "M", "Diagnosis": "Hypertension", "Treatment": "Beta Blockers", "HealthScore": 68},
    {"Age": 29, "Gender": "F", "Diagnosis": "Asthma", "Treatment": "Inhaler", "HealthScore": 82},
    {"Age": 54, "Gender": "M", "Diagnosis": "Heart Disease", "Treatment": "Statins", "HealthScore": 60},
    {"Age": 63, "Gender": "F", "Diagnosis": "Arthritis", "Treatment": "NSAIDs", "HealthScore": 55},
]

# Step 2: Convert to DataFrame
df = pd.DataFrame(data)

# Step 3: Feature encoding
X = pd.get_dummies(df[["Age", "Gender", "Diagnosis", "Treatment"]])

# Step 4: Target variable
y = df["HealthScore"]

# Step 5: Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

# Step 6: Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 7: Predict
predictions = model.predict(X_test)

# Output
print("Test Features:\n", X_test)
print("\nPredicted Health Scores (Final Grade):", predictions)
print("\nActual Health Scores:", y_test.values)

"""Deployment-Building an Interactive App"""

!pip uninstall streamlit
!pip install streamlit

"""Create a Prediction Function"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder

# In-memory healthcare data
data = [
    {"Age": 34, "Gender": "F", "Diagnosis": "Diabetes", "Treatment": "Insulin", "HealthScore": 75},
    {"Age": 45, "Gender": "M", "Diagnosis": "Hypertension", "Treatment": "Beta Blockers", "HealthScore": 68},
    {"Age": 29, "Gender": "F", "Diagnosis": "Asthma", "Treatment": "Inhaler", "HealthScore": 82},
    {"Age": 54, "Gender": "M", "Diagnosis": "Heart Disease", "Treatment": "Statins", "HealthScore": 60},
    {"Age": 63, "Gender": "F", "Diagnosis": "Arthritis", "Treatment": "NSAIDs", "HealthScore": 55},
]

# Step 1: Convert data to DataFrame
df = pd.DataFrame(data)

# Step 2: Feature Encoding (One-Hot Encoding)
X = pd.get_dummies(df[["Age", "Gender", "Diagnosis", "Treatment"]])

# Step 3: Target variable (HealthScore)
y = df["HealthScore"]

# Step 4: Train a Linear Regression model
model = LinearRegression()
model.fit(X, y)

# Step 5: Create the prediction function
def predict_health_score(age, gender, diagnosis, treatment):
    """
    Predict the HealthScore (similar to final grade) for a given patient.

    Args:
    - age (int): Age of the patient
    - gender (str): Gender of the patient ("F" or "M")
    - diagnosis (str): Diagnosis of the patient (e.g., "Diabetes", "Hypertension")
    - treatment (str): Treatment prescribed (e.g., "Insulin", "Beta Blockers")

    Returns:
    - float: Predicted HealthScore (Final Grade)
    """
    # Prepare the input data for prediction
    input_data = pd.DataFrame({
        "Age": [age],
        "Gender": [gender],
        "Diagnosis": [diagnosis],
        "Treatment": [treatment]
    })

    # Step 6: One-hot encode the input data
    input_encoded = pd.get_dummies(input_data)

    # Align the input with the training features
    input_encoded = input_encoded.reindex(columns=X.columns, fill_value=0)

    # Step 7: Make the prediction using the trained model
    predicted_score = model.predict(input_encoded)

    return predicted_score[0]

# Example usage of the prediction function
age = 40
gender = "F"
diagnosis = "Diabetes"
treatment = "Insulin"

predicted_score = predict_health_score(age, gender, diagnosis, treatment)

# Display the prediction result
print(f"Predicted HealthScore for Patient: {predicted_score:.2f}")

"""Create a Gradio Interface"""

import gradio as gr

def assess_health_risk(age, bmi, blood_pressure, glucose_level):
    risk_score = 0
    if age > 50:
        risk_score += 1
    if bmi > 30:
        risk_score += 1
    if blood_pressure > 140:
        risk_score += 1
    if glucose_level > 125:
        risk_score += 1

    if risk_score >= 3:
        return "High Risk – Please consult a healthcare provider."
    elif risk_score == 2:
        return "Moderate Risk – Monitor your health closely."
    else:
        return "Low Risk – Keep up the healthy lifestyle!"

interface = gr.Interface(
    fn=assess_health_risk,
    inputs=[
        gr.Number(label="Age"),
        gr.Number(label="BMI"),
        gr.Number(label="Blood Pressure (systolic)"),
        gr.Number(label="Glucose Level (mg/dL)")
    ],
    outputs=gr.Textbox(label="Health Risk Assessment"),
    title="Healthcare Risk Assessment Tool",
    description="Enter patient data to assess general health risk. This demo uses simple logic for illustrative purposes."
)

interface.launch()